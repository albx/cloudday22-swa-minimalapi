@page "/talks/add"

@inject IAgendaClient Client
@inject NavigationManager NavigationManager

<PageTitle>Add a new talk</PageTitle>

<div class="row">
    <div class="col">
        <h1>Add a new talk</h1>
    </div>
    <div class="col-auto">
        <a href="/" class="btn btn-primary">Back to agenda</a>
    </div>
</div>
<hr />
<div class="row">
    <EditForm Model="model" class="col-md-12" OnValidSubmit="AddTalkAsync">
        <DataAnnotationsValidator />

        <div class="form-check mb-2">
            <InputCheckbox @bind-Value="model.IsBreakSlot" class="form-check-input" id="breakSlot" />
            <label class="form-check-label" for="breakSlot">
                Break slot
            </label>
        </div>

        <div class="mb-2">
            <label for="talkTitle">Title</label>
            <InputText @bind-Value="model.Title" class="form-control" id="talkTitle" />
            <ValidationMessage For="@(() => model.Title)" />
        </div>

        <div class="mb-2">
            <label for="talkSpeaker">Speaker</label>
            <InputText @bind-Value="model.Speaker" class="form-control" id="talkSpeaker" disabled="@model.IsBreakSlot" />
            <ValidationMessage For="@(() => model.Speaker)" />
        </div>

        <div class="row mb-2">
            <div class="col-md-6">
                <label for="talkStartingTime">From</label>
                <input type="time" @bind-value="model.StartingTime" class="form-control" id="talkStartingTime" />
                <ValidationMessage For="@(() => model.StartingTime)" />
            </div>
            <div class="col-md-6">
                <label for="talkEndingTime">To</label>
                <input type="time" @bind-value="model.EndingTime" class="form-control" id="talkEndingTime" />
                <ValidationMessage For="@(() => model.EndingTime)" />
            </div>
        </div>

        <div class="mb-2">
            <label for="talkAbstract">Abstract</label>
            <InputTextArea @bind-Value="model.Abstract" class="form-control" id="talkAbstract" rows="10" />
            <ValidationMessage For="@(() => model.Abstract)" />
        </div>

        <div class="mb-2">
            <button class="btn btn-primary">Save</button>
            <button type="button" @onclick="Cancel" class="btn btn-outline-primary">Cancel</button>
        </div>
    </EditForm>
</div>


@code {
    private ViewModel model = new();

    void Cancel() => model = new();

    async Task AddTalkAsync()
    {
        if (model.IsBreakSlot)
        {
            model.Speaker = string.Empty;
            model.Abstract = string.Empty;
        }

        await Client.CreateTalkAsync(ConvertForApi(model));

        NavigationManager.NavigateTo("/");
    }

    private CreateTalkModel ConvertForApi(ViewModel model)
    {
        return new()
        {
            Abstract = model.Abstract,
            IsBreakSlot = model.IsBreakSlot,
            Title = model.Title,
            Speaker = model.Speaker,
            StartingTime = new TimeSpan(model.StartingTime.Hour, model.StartingTime.Minute, 0),
            EndingTime = new TimeSpan(model.EndingTime.Hour, model.EndingTime.Minute, 0)
        };
    }

    class ViewModel
    {
        [Required]
        public string Title { get; set; } = string.Empty;

        public string Speaker { get; set; } = string.Empty;

        public string Abstract { get; set; } = string.Empty;

        [Required]
        public TimeOnly StartingTime { get; set; }

        [Required]
        public TimeOnly EndingTime { get; set; }

        public bool IsBreakSlot { get; set; }
    }
}
